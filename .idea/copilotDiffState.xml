<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/project/automation/baseclass/BaseUISteps.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/project/automation/baseclass/BaseUISteps.java" />
              <option name="originalContent" value="package com.project.automation.baseclass;&#10;&#10;import net.serenitybdd.core.steps.UIInteractionSteps;&#10;&#10;/**&#10; * Base UI Steps class to be extended by all specific step definition classes.&#10; * This class can include common methods and properties shared across different step definitions.&#10; * Right now it is kept simple, but can be expanded as needed.&#10; */&#10;&#10;public class BaseUISteps extends UIInteractionSteps {&#10;&#10;    // This class now properly extends UIInteractionSteps which provides&#10;    // access to pages and WebDriver functionality&#10;}&#10;" />
              <option name="updatedContent" value="package com.project.automation.baseclass;&#10;&#10;import net.serenitybdd.core.steps.UIInteractionSteps;&#10;&#10;/**&#10; * Base UI Steps class to be extended by all specific step definition classes.&#10; * This class can include common methods and properties shared across different step definitions.&#10; * Right now it is kept simple, but can be expanded as needed.&#10; */&#10;&#10;public class BaseUISteps extends UIInteractionSteps {&#10;&#10;    // This class now properly extends UIInteractionSteps which provides&#10;    // access to pages and WebDriver functionality&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/test/automation/utils/ApiUtils.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/test/automation/utils/ApiUtils.java" />
              <option name="originalContent" value="package com.test.automation.utils;&#10;&#10;import java.util.function.Supplier;&#10;import org.json.JSONObject;&#10;&#10;/**&#10; * Utility class for API related operations.&#10; * Provides methods for API retries, email validation, and JSON parsing.&#10; */&#10;public class ApiUtils {&#10;&#10;    private ApiUtils(){}&#10;&#10;    public static &lt;T&gt; T enableRetries(Supplier&lt;T&gt; supplier, int max_retries, int maxBackoff_ms) {&#10;        for (int i = 0; i &lt;= max_retries; i++) {&#10;            try {&#10;                return supplier.get();&#10;            } catch (Exception e) {&#10;                if (i == max_retries - 1) {&#10;                    throw new RuntimeException(e);&#10;                }&#10;                long backOff_ms = (long)Math.min(Math.pow(2,i) * 1000, maxBackoff_ms);&#10;                try {&#10;                    Thread.sleep(backOff_ms);&#10;                } catch (InterruptedException e1) {&#10;                    Thread.currentThread().interrupt();&#10;                }&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public static boolean isEmail(String email) {&#10;        return email != null &amp;&amp; email.matches(&quot;^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$&quot;);&#10;    }&#10;&#10;    public static JSONObject parse(String body) {&#10;        return new JSONObject(body);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.test.automation.utils;&#10;&#10;import java.util.function.Supplier;&#10;import org.json.JSONObject;&#10;&#10;/**&#10; * Utility class for API related operations.&#10; * Provides methods for API retries, email validation, and JSON parsing.&#10; */&#10;public class ApiUtils {&#10;&#10;    private ApiUtils(){}&#10;&#10;    public static &lt;T&gt; T enableRetries(Supplier&lt;T&gt; supplier, int max_retries, int maxBackoff_ms) {&#10;        for (int i = 0; i &lt;= max_retries; i++) {&#10;            try {&#10;                return supplier.get();&#10;            } catch (Exception e) {&#10;                if (i == max_retries - 1) {&#10;                    throw new RuntimeException(e);&#10;                }&#10;                long backOff_ms = (long)Math.min(Math.pow(2,i) * 1000, maxBackoff_ms);&#10;                try {&#10;                    Thread.sleep(backOff_ms);&#10;                } catch (InterruptedException e1) {&#10;                    Thread.currentThread().interrupt();&#10;                }&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public static boolean isEmail(String email) {&#10;        return email != null &amp;&amp; email.matches(&quot;^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$&quot;);&#10;    }&#10;&#10;    public static JSONObject parse(String body) {&#10;        return new JSONObject(body);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/test/automation/utils/ConfigHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/test/automation/utils/ConfigHelper.java" />
              <option name="originalContent" value="package com.test.automation.utils;&#10;&#10;import java.io.File;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import org.apache.commons.lang3.StringUtils;&#10;&#10;/**&#10; * Utility class to handle configuration management and environment-specific settings.&#10; */&#10;public class ConfigHelper {&#10;&#10;    private static final Map&lt;String, String&gt; configProperties;&#10;    private static final String DEFAULT_ENV = &quot;dev&quot;;&#10;    private static final String[] VALID_ENVIRONMENTS = {&quot;dev&quot;, &quot;qa&quot;, &quot;staging&quot;, &quot;prod&quot;};&#10;&#10;    static {&#10;        configProperties = new HashMap&lt;&gt;();&#10;        loadConfigProperties();&#10;    }&#10;&#10;    public static String getEnvironment() {&#10;        String env = System.getProperty(&quot;env&quot;, DEFAULT_ENV);&#10;        if (!StringUtils.equalsAnyIgnoreCase(env, VALID_ENVIRONMENTS)) {&#10;            throw new RuntimeException(&quot;Invalid environment value. Allowed values are dev, qa, staging, prod&quot;);&#10;        }&#10;        return env.toLowerCase();&#10;    }&#10;&#10;    public static String getDomain() {&#10;        return switch (getEnvironment()) {&#10;            case &quot;dev&quot; -&gt; &quot;.dev.com&quot;;&#10;            case &quot;qa&quot; -&gt; &quot;.qa10.com&quot;;&#10;            case &quot;staging&quot; -&gt; &quot;.integ.com&quot;;&#10;            case &quot;prod&quot; -&gt; &quot;prod.com&quot;;&#10;            default -&gt; throw new IllegalStateException(&quot;Unexpected value: &quot; + getEnvironment());&#10;        };&#10;    }&#10;&#10;    private static void loadConfigProperties() {&#10;        String configFilePath = getConfigFilePath();&#10;        try (java.io.InputStream input = new java.io.FileInputStream(configFilePath)) {&#10;            java.util.Properties prop = new java.util.Properties();&#10;            prop.load(input);&#10;            for (String key : prop.stringPropertyNames()) {&#10;                configProperties.put(key, prop.getProperty(key));&#10;            }&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;Failed to load config.properties file.&quot;, e);&#10;        }&#10;    }&#10;&#10;    private static String getConfigFilePath() {&#10;        if (checkIfConfigInRoot()) {&#10;            return System.getProperty(&quot;user.dir&quot;) + File.separator + &quot;config.properties&quot;;&#10;        } else if (checkIfConfigInResources()) {&#10;            return System.getProperty(&quot;user.dir&quot;) + File.separator + &quot;src&quot; + File.separator + &quot;test&quot; + &#10;                   File.separator + &quot;resources&quot; + File.separator + &quot;config.properties&quot;;&#10;        }&#10;        throw new RuntimeException(&quot;config.properties file not found in root or resources directory.&quot;);&#10;    }&#10;&#10;    private static boolean checkIfConfigInRoot() {&#10;        try {&#10;            String rootConfig = System.getProperty(&quot;user.dir&quot;) + File.separator + &quot;config.properties&quot;;&#10;            return new File(rootConfig).exists();&#10;        } catch (Exception e) {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private static boolean checkIfConfigInResources() {&#10;        try {&#10;            String resourcesConfig = System.getProperty(&quot;user.dir&quot;) + File.separator + &quot;src&quot; + File.separator + &#10;                                   &quot;test&quot; + File.separator + &quot;resources&quot; + File.separator + &quot;config.properties&quot;;&#10;            return new File(resourcesConfig).exists();&#10;        } catch (Exception e) {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public static String getProperty(String key) {&#10;        return configProperties.get(key);&#10;    }&#10;&#10;    public static String getProperty(String key, String defaultValue) {&#10;        return configProperties.getOrDefault(key, defaultValue);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.test.automation.utils;&#10;&#10;import java.io.File;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import org.apache.commons.lang3.StringUtils;&#10;&#10;/**&#10; * Utility class to handle configuration management and environment-specific settings.&#10; */&#10;public class ConfigHelper {&#10;&#10;    private static final Map&lt;String, String&gt; configProperties;&#10;    private static final String DEFAULT_ENV = &quot;dev&quot;;&#10;    private static final String[] VALID_ENVIRONMENTS = {&quot;dev&quot;, &quot;qa&quot;, &quot;staging&quot;, &quot;prod&quot;};&#10;&#10;    static {&#10;        configProperties = new HashMap&lt;&gt;();&#10;        loadConfigProperties();&#10;    }&#10;&#10;    public static String getEnvironment() {&#10;        String env = System.getProperty(&quot;env&quot;, DEFAULT_ENV);&#10;        if (!StringUtils.equalsAnyIgnoreCase(env, VALID_ENVIRONMENTS)) {&#10;            throw new RuntimeException(&quot;Invalid environment value. Allowed values are dev, qa, staging, prod&quot;);&#10;        }&#10;        return env.toLowerCase();&#10;    }&#10;&#10;    public static String getDomain() {&#10;        return switch (getEnvironment()) {&#10;            case &quot;dev&quot; -&gt; &quot;.dev.com&quot;;&#10;            case &quot;qa&quot; -&gt; &quot;.qa10.com&quot;;&#10;            case &quot;staging&quot; -&gt; &quot;.integ.com&quot;;&#10;            case &quot;prod&quot; -&gt; &quot;prod.com&quot;;&#10;            default -&gt; throw new IllegalStateException(&quot;Unexpected value: &quot; + getEnvironment());&#10;        };&#10;    }&#10;&#10;    private static void loadConfigProperties() {&#10;        String configFilePath = getConfigFilePath();&#10;        try (java.io.InputStream input = new java.io.FileInputStream(configFilePath)) {&#10;            java.util.Properties prop = new java.util.Properties();&#10;            prop.load(input);&#10;            for (String key : prop.stringPropertyNames()) {&#10;                configProperties.put(key, prop.getProperty(key));&#10;            }&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;Failed to load config.properties file.&quot;, e);&#10;        }&#10;    }&#10;&#10;    private static String getConfigFilePath() {&#10;        if (checkIfConfigInRoot()) {&#10;            return System.getProperty(&quot;user.dir&quot;) + File.separator + &quot;config.properties&quot;;&#10;        } else if (checkIfConfigInResources()) {&#10;            return System.getProperty(&quot;user.dir&quot;) + File.separator + &quot;src&quot; + File.separator + &quot;test&quot; + &#10;                   File.separator + &quot;resources&quot; + File.separator + &quot;config.properties&quot;;&#10;        }&#10;        throw new RuntimeException(&quot;config.properties file not found in root or resources directory.&quot;);&#10;    }&#10;&#10;    private static boolean checkIfConfigInRoot() {&#10;        try {&#10;            String rootConfig = System.getProperty(&quot;user.dir&quot;) + File.separator + &quot;config.properties&quot;;&#10;            return new File(rootConfig).exists();&#10;        } catch (Exception e) {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private static boolean checkIfConfigInResources() {&#10;        try {&#10;            String resourcesConfig = System.getProperty(&quot;user.dir&quot;) + File.separator + &quot;src&quot; + File.separator + &#10;                                   &quot;test&quot; + File.separator + &quot;resources&quot; + File.separator + &quot;config.properties&quot;;&#10;            return new File(resourcesConfig).exists();&#10;        } catch (Exception e) {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public static String getProperty(String key) {&#10;        return configProperties.get(key);&#10;    }&#10;&#10;    public static String getProperty(String key, String defaultValue) {&#10;        return configProperties.getOrDefault(key, defaultValue);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/test/testautomation/steps/api/AccountTransactionSteps.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/test/testautomation/steps/api/AccountTransactionSteps.java" />
              <option name="originalContent" value="package com.test.testautomation.steps.api;&#10;&#10;import com.test.automation.api.endpoints.ApiEndpoints;&#10;import com.test.automation.baseclass.BaseApiSteps;&#10;import com.test.automation.api.models.Transaction;&#10;import io.restassured.response.Response;&#10;import net.serenitybdd.annotations.Step;&#10;&#10;import java.math.BigDecimal;&#10;&#10;/**&#10; * Step definitions for account transaction related API interactions.&#10; * This class uses BaseApiSteps to perform API requests and handle responses.&#10; * Inclduded basic positive and negative scenarios for transaction creation and retrieval due to time constraints.&#10; */&#10;public class AccountTransactionSteps extends BaseApiSteps {&#10;&#10;    private Transaction transaction;&#10;&#10;    public AccountTransactionSteps() {&#10;        this.transaction = new Transaction();&#10;    }&#10;&#10;    @Step(&quot;Create transaction for userId: {0}, amount: {1}, type: {2}, recipientId: {3}&quot;)&#10;    public Response createTransaction(String userId, BigDecimal amount, String type, String recipientId) {&#10;        transaction.setUserId(userId);&#10;        transaction.setAmount(amount);&#10;        transaction.setType(type);&#10;        transaction.setRecipientId(recipientId);&#10;        setBasePath(ApiEndpoints.TRANSACTIONS);&#10;        return executePostRequest(transaction.toString());&#10;    }&#10;&#10;    @Step(&quot;Get transactions for userId: {0}&quot;)&#10;    public Response getTransactions(String userId) {&#10;        setBasePath(ApiEndpoints.transactionsByUser(userId));&#10;        return executeRequest(&quot;GET&quot;);&#10;    }&#10;&#10;    @Step(&quot;Attempt invalid transaction for userId: {0}, amount: {1}, type: {2}, recipientId: {3}&quot;)&#10;    public Response invalidTransaction(String userId, BigDecimal amount, String type, String recipientId) {&#10;        transaction.setUserId(userId);&#10;        transaction.setAmount(amount);&#10;        transaction.setType(type);&#10;        transaction.setRecipientId(recipientId);&#10;        setBasePath(ApiEndpoints.INVALIDRESOURCE);&#10;        return executePostRequest(transaction.toString());&#10;    }&#10;&#10;    @Step(&quot;Reset transaction state&quot;)&#10;    public void resetTransactionState() {&#10;        resetRequest();&#10;        transaction = new Transaction();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.test.testautomation.steps.api;&#10;&#10;import com.test.automation.api.endpoints.ApiEndpoints;&#10;import com.test.automation.baseclass.BaseApiSteps;&#10;import com.test.automation.api.models.Transaction;&#10;import io.restassured.response.Response;&#10;import net.serenitybdd.annotations.Step;&#10;&#10;import java.math.BigDecimal;&#10;&#10;/**&#10; * Step definitions for account transaction related API interactions.&#10; * This class uses BaseApiSteps to perform API requests and handle responses.&#10; * Inclduded basic positive and negative scenarios for transaction creation and retrieval due to time constraints.&#10; */&#10;public class AccountTransactionSteps extends BaseApiSteps {&#10;&#10;    private Transaction transaction;&#10;&#10;    public AccountTransactionSteps() {&#10;        this.transaction = new Transaction();&#10;    }&#10;&#10;    @Step(&quot;Create transaction for userId: {0}, amount: {1}, type: {2}, recipientId: {3}&quot;)&#10;    public Response createTransaction(String userId, BigDecimal amount, String type, String recipientId) {&#10;        transaction.setUserId(userId);&#10;        transaction.setAmount(amount);&#10;        transaction.setType(type);&#10;        transaction.setRecipientId(recipientId);&#10;        setBasePath(ApiEndpoints.TRANSACTIONS);&#10;        return executePostRequest(transaction.toString());&#10;    }&#10;&#10;    @Step(&quot;Get transactions for userId: {0}&quot;)&#10;    public Response getTransactions(String userId) {&#10;        setBasePath(ApiEndpoints.transactionsByUser(userId));&#10;        return executeRequest(&quot;GET&quot;);&#10;    }&#10;&#10;    @Step(&quot;Attempt invalid transaction for userId: {0}, amount: {1}, type: {2}, recipientId: {3}&quot;)&#10;    public Response invalidTransaction(String userId, BigDecimal amount, String type, String recipientId) {&#10;        transaction.setUserId(userId);&#10;        transaction.setAmount(amount);&#10;        transaction.setType(type);&#10;        transaction.setRecipientId(recipientId);&#10;        setBasePath(ApiEndpoints.INVALIDRESOURCE);&#10;        return executePostRequest(transaction.toString());&#10;    }&#10;&#10;    @Step(&quot;Reset transaction state&quot;)&#10;    public void resetTransactionState() {&#10;        resetRequest();&#10;        transaction = new Transaction();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>